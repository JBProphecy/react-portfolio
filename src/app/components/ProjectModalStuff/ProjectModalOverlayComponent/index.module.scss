/**********************************************************************************************************************/

// Transitions

.component {
  --transitionDuration: unset;
  --transitionFunction: unset;

  --backgroundOpacityHidden: 0;
  --backgroundOpacityVisible: 0.9;

  --containerOpacityHidden: 0;
  --containerOpacityVisible: 1;

  --containerTransformHidden: translateY(-3rem);
  --containerTransformVisible: translateY(0);

  @media screen and (aspect-ratio < 1) {
    --containerTransformHidden: scale(0.7);
    --containerTransformVisible: scale(1);
  }

  &.hidden {

    > .layer.background {
      --backgroundOpacity: var(--backgroundOpacityHidden);
    }

    > .layer.content {
      --containerOpacity: var(--containerOpacityHidden);
      --containerTransform: var(--containerTransformHidden);
    }
  }

  &.visible {

    > .layer.background {
      --backgroundOpacity: var(--backgroundOpacityVisible);
    }

    > .layer.content {
      --containerOpacity: var(--containerOpacityVisible);
      --containerTransform: var(--containerTransformVisible);
    }
  }
}

/**********************************************************************************************************************/

// Transitions

.component {

  > .layer.background {
    opacity: var(--backgroundOpacity);
    transition: opacity var(--transitionDuration) var(--transitionFunction);
  }

  > .layer.content > .container {
    opacity: var(--containerOpacity);
    transform: var(--containerTransform);
    transition:
      opacity var(--transitionDuration) var(--transitionFunction),
      transform var(--transitionDuration) var(--transitionFunction)
    ;
  }
}

/**********************************************************************************************************************/

// Styles

.component {
  --component-width: var(--app-width);
  --component-height: var(--app-height);
  --component-padding: calc(4 * var(--app-unit-size));

  --content-width: calc(var(--component-width) - 2 * var(--component-padding));
  --content-height: calc(var(--component-height) - 2 * var(--component-padding));

  --container-width: min(var(--content-width), var(--content-height));
  --container-height: var(--content-height);

  @media screen and (aspect-ratio < 1) {
    --component-padding: 0px;
  }
}

/**********************************************************************************************************************/

// Styles

.component {
  width: var(--component-width);
  height: var(--component-height);
  position: relative;

  > .layer {
    width: inherit;
    height: inherit;
    position: absolute;

    &.background {
      background-color: black;
    }

    &.content {
      display: flex;
      justify-content: center;
      padding: var(--component-padding);

      > .container {
        width: var(--container-width);
        height: var(--container-height);
      }
    }
  }
}

/**********************************************************************************************************************/
